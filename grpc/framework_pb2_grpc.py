# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import framework_pb2 as framework__pb2


class RemoteSerialStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.readLines = channel.unary_unary(
        '/RemoteSerial/readLines',
        request_serializer=framework__pb2.SerialDevice.SerializeToString,
        response_deserializer=framework__pb2.SerialRead.FromString,
        )
    self.WriteLine = channel.unary_unary(
        '/RemoteSerial/WriteLine',
        request_serializer=framework__pb2.SerialWrite.SerializeToString,
        response_deserializer=framework__pb2.SerialRead.FromString,
        )
    self.Invoke = channel.stream_stream(
        '/RemoteSerial/Invoke',
        request_serializer=framework__pb2.SerialCmd.SerializeToString,
        response_deserializer=framework__pb2.SerialEvent.FromString,
        )


class RemoteSerialServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def readLines(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def WriteLine(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Invoke(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RemoteSerialServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'readLines': grpc.unary_unary_rpc_method_handler(
          servicer.readLines,
          request_deserializer=framework__pb2.SerialDevice.FromString,
          response_serializer=framework__pb2.SerialRead.SerializeToString,
      ),
      'WriteLine': grpc.unary_unary_rpc_method_handler(
          servicer.WriteLine,
          request_deserializer=framework__pb2.SerialWrite.FromString,
          response_serializer=framework__pb2.SerialRead.SerializeToString,
      ),
      'Invoke': grpc.stream_stream_rpc_method_handler(
          servicer.Invoke,
          request_deserializer=framework__pb2.SerialCmd.FromString,
          response_serializer=framework__pb2.SerialEvent.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'RemoteSerial', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DeviceAgentStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.sync = channel.unary_unary(
        '/DeviceAgent/sync',
        request_serializer=framework__pb2.SyncRequest.SerializeToString,
        response_deserializer=framework__pb2.SyncResponse.FromString,
        )


class DeviceAgentServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def sync(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DeviceAgentServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'sync': grpc.unary_unary_rpc_method_handler(
          servicer.sync,
          request_deserializer=framework__pb2.SyncRequest.FromString,
          response_serializer=framework__pb2.SyncResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DeviceAgent', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
